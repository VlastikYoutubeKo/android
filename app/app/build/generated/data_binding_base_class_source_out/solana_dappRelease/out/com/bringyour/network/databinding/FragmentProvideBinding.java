// Generated by view binder compiler. Do not edit!
package com.bringyour.network.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Barrier;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bringyour.network.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.switchmaterial.SwitchMaterial;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentProvideBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView provideDescription;

  @NonNull
  public final Barrier provideEarningDescriptionBarrier;

  @NonNull
  public final TextView provideEarningMeteredDescription;

  @NonNull
  public final TextView provideEarningMeteredSummary;

  @NonNull
  public final TextView provideEarningPeakDescription;

  @NonNull
  public final TextView provideEarningPeakSummary;

  @NonNull
  public final MaterialButton provideHelpButton;

  @NonNull
  public final SwitchMaterial provideSwitch;

  private FragmentProvideBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView provideDescription, @NonNull Barrier provideEarningDescriptionBarrier,
      @NonNull TextView provideEarningMeteredDescription,
      @NonNull TextView provideEarningMeteredSummary,
      @NonNull TextView provideEarningPeakDescription, @NonNull TextView provideEarningPeakSummary,
      @NonNull MaterialButton provideHelpButton, @NonNull SwitchMaterial provideSwitch) {
    this.rootView = rootView;
    this.provideDescription = provideDescription;
    this.provideEarningDescriptionBarrier = provideEarningDescriptionBarrier;
    this.provideEarningMeteredDescription = provideEarningMeteredDescription;
    this.provideEarningMeteredSummary = provideEarningMeteredSummary;
    this.provideEarningPeakDescription = provideEarningPeakDescription;
    this.provideEarningPeakSummary = provideEarningPeakSummary;
    this.provideHelpButton = provideHelpButton;
    this.provideSwitch = provideSwitch;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentProvideBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentProvideBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_provide, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentProvideBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.provide_description;
      TextView provideDescription = ViewBindings.findChildViewById(rootView, id);
      if (provideDescription == null) {
        break missingId;
      }

      id = R.id.provide_earning_description_barrier;
      Barrier provideEarningDescriptionBarrier = ViewBindings.findChildViewById(rootView, id);
      if (provideEarningDescriptionBarrier == null) {
        break missingId;
      }

      id = R.id.provide_earning_metered_description;
      TextView provideEarningMeteredDescription = ViewBindings.findChildViewById(rootView, id);
      if (provideEarningMeteredDescription == null) {
        break missingId;
      }

      id = R.id.provide_earning_metered_summary;
      TextView provideEarningMeteredSummary = ViewBindings.findChildViewById(rootView, id);
      if (provideEarningMeteredSummary == null) {
        break missingId;
      }

      id = R.id.provide_earning_peak_description;
      TextView provideEarningPeakDescription = ViewBindings.findChildViewById(rootView, id);
      if (provideEarningPeakDescription == null) {
        break missingId;
      }

      id = R.id.provide_earning_peak_summary;
      TextView provideEarningPeakSummary = ViewBindings.findChildViewById(rootView, id);
      if (provideEarningPeakSummary == null) {
        break missingId;
      }

      id = R.id.provide_help_button;
      MaterialButton provideHelpButton = ViewBindings.findChildViewById(rootView, id);
      if (provideHelpButton == null) {
        break missingId;
      }

      id = R.id.provide_switch;
      SwitchMaterial provideSwitch = ViewBindings.findChildViewById(rootView, id);
      if (provideSwitch == null) {
        break missingId;
      }

      return new FragmentProvideBinding((ConstraintLayout) rootView, provideDescription,
          provideEarningDescriptionBarrier, provideEarningMeteredDescription,
          provideEarningMeteredSummary, provideEarningPeakDescription, provideEarningPeakSummary,
          provideHelpButton, provideSwitch);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

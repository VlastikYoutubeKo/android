// Generated by view binder compiler. Do not edit!
package com.bringyour.network.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Barrier;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bringyour.network.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAccountBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Barrier accountBalanceBottomBarrier;

  @NonNull
  public final TextView accountBalanceLabel;

  @NonNull
  public final TextView accountBalanceSummary;

  @NonNull
  public final MaterialButton accountDeleteButton;

  @NonNull
  public final MaterialButton accountHelpButton;

  @NonNull
  public final Barrier accountLabelBarrier;

  @NonNull
  public final TextView accountLegal;

  @NonNull
  public final MaterialButton accountLogoutButton;

  @NonNull
  public final TextView accountNetworkDomainName;

  @NonNull
  public final TextView accountNetworkName;

  @NonNull
  public final Barrier accountSubscriptionBottomBarrier;

  @NonNull
  public final MaterialButton accountSubscriptionChangeButton;

  @NonNull
  public final CircularProgressIndicator accountSubscriptionChangeSpinner;

  @NonNull
  public final TextView accountSubscriptionError;

  @NonNull
  public final TextView accountSubscriptionLabel;

  @NonNull
  public final TextView accountSubscriptionPrice;

  @NonNull
  public final TextView accountSubscriptionPriceDescription;

  @NonNull
  public final Barrier accountSubscriptionPriceLeftBarrier;

  @NonNull
  public final TextView accountSubscriptionSummary;

  @NonNull
  public final Barrier accountSubscriptionTopBarrier;

  @NonNull
  public final MaterialButton accountUpdateButton;

  @NonNull
  public final CircularProgressIndicator accountUpdateSpinner;

  @NonNull
  public final TextView accountWalletBalanceLabel;

  @NonNull
  public final TextView accountWalletBalanceSummary;

  @NonNull
  public final Barrier accountWalletBottomBarrier;

  @NonNull
  public final TextView accountWalletDescription;

  @NonNull
  public final TextView accountWalletError;

  @NonNull
  public final MaterialButton accountWalletInitButton;

  @NonNull
  public final CircularProgressIndicator accountWalletInitSpinner;

  @NonNull
  public final TextView accountWalletLabel;

  @NonNull
  public final TextView accountWalletPendingBalanceLabel;

  @NonNull
  public final TextView accountWalletPendingBalanceSummary;

  @NonNull
  public final TextView accountWalletSummary;

  @NonNull
  public final Barrier accountWalletTopBarrier;

  @NonNull
  public final MaterialButton accountWalletTransferOutButton;

  @NonNull
  public final CircularProgressIndicator accountWalletTransferOutSpinner;

  private FragmentAccountBinding(@NonNull ScrollView rootView,
      @NonNull Barrier accountBalanceBottomBarrier, @NonNull TextView accountBalanceLabel,
      @NonNull TextView accountBalanceSummary, @NonNull MaterialButton accountDeleteButton,
      @NonNull MaterialButton accountHelpButton, @NonNull Barrier accountLabelBarrier,
      @NonNull TextView accountLegal, @NonNull MaterialButton accountLogoutButton,
      @NonNull TextView accountNetworkDomainName, @NonNull TextView accountNetworkName,
      @NonNull Barrier accountSubscriptionBottomBarrier,
      @NonNull MaterialButton accountSubscriptionChangeButton,
      @NonNull CircularProgressIndicator accountSubscriptionChangeSpinner,
      @NonNull TextView accountSubscriptionError, @NonNull TextView accountSubscriptionLabel,
      @NonNull TextView accountSubscriptionPrice,
      @NonNull TextView accountSubscriptionPriceDescription,
      @NonNull Barrier accountSubscriptionPriceLeftBarrier,
      @NonNull TextView accountSubscriptionSummary, @NonNull Barrier accountSubscriptionTopBarrier,
      @NonNull MaterialButton accountUpdateButton,
      @NonNull CircularProgressIndicator accountUpdateSpinner,
      @NonNull TextView accountWalletBalanceLabel, @NonNull TextView accountWalletBalanceSummary,
      @NonNull Barrier accountWalletBottomBarrier, @NonNull TextView accountWalletDescription,
      @NonNull TextView accountWalletError, @NonNull MaterialButton accountWalletInitButton,
      @NonNull CircularProgressIndicator accountWalletInitSpinner,
      @NonNull TextView accountWalletLabel, @NonNull TextView accountWalletPendingBalanceLabel,
      @NonNull TextView accountWalletPendingBalanceSummary, @NonNull TextView accountWalletSummary,
      @NonNull Barrier accountWalletTopBarrier,
      @NonNull MaterialButton accountWalletTransferOutButton,
      @NonNull CircularProgressIndicator accountWalletTransferOutSpinner) {
    this.rootView = rootView;
    this.accountBalanceBottomBarrier = accountBalanceBottomBarrier;
    this.accountBalanceLabel = accountBalanceLabel;
    this.accountBalanceSummary = accountBalanceSummary;
    this.accountDeleteButton = accountDeleteButton;
    this.accountHelpButton = accountHelpButton;
    this.accountLabelBarrier = accountLabelBarrier;
    this.accountLegal = accountLegal;
    this.accountLogoutButton = accountLogoutButton;
    this.accountNetworkDomainName = accountNetworkDomainName;
    this.accountNetworkName = accountNetworkName;
    this.accountSubscriptionBottomBarrier = accountSubscriptionBottomBarrier;
    this.accountSubscriptionChangeButton = accountSubscriptionChangeButton;
    this.accountSubscriptionChangeSpinner = accountSubscriptionChangeSpinner;
    this.accountSubscriptionError = accountSubscriptionError;
    this.accountSubscriptionLabel = accountSubscriptionLabel;
    this.accountSubscriptionPrice = accountSubscriptionPrice;
    this.accountSubscriptionPriceDescription = accountSubscriptionPriceDescription;
    this.accountSubscriptionPriceLeftBarrier = accountSubscriptionPriceLeftBarrier;
    this.accountSubscriptionSummary = accountSubscriptionSummary;
    this.accountSubscriptionTopBarrier = accountSubscriptionTopBarrier;
    this.accountUpdateButton = accountUpdateButton;
    this.accountUpdateSpinner = accountUpdateSpinner;
    this.accountWalletBalanceLabel = accountWalletBalanceLabel;
    this.accountWalletBalanceSummary = accountWalletBalanceSummary;
    this.accountWalletBottomBarrier = accountWalletBottomBarrier;
    this.accountWalletDescription = accountWalletDescription;
    this.accountWalletError = accountWalletError;
    this.accountWalletInitButton = accountWalletInitButton;
    this.accountWalletInitSpinner = accountWalletInitSpinner;
    this.accountWalletLabel = accountWalletLabel;
    this.accountWalletPendingBalanceLabel = accountWalletPendingBalanceLabel;
    this.accountWalletPendingBalanceSummary = accountWalletPendingBalanceSummary;
    this.accountWalletSummary = accountWalletSummary;
    this.accountWalletTopBarrier = accountWalletTopBarrier;
    this.accountWalletTransferOutButton = accountWalletTransferOutButton;
    this.accountWalletTransferOutSpinner = accountWalletTransferOutSpinner;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAccountBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAccountBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_account, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAccountBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.account_balance_bottom_barrier;
      Barrier accountBalanceBottomBarrier = ViewBindings.findChildViewById(rootView, id);
      if (accountBalanceBottomBarrier == null) {
        break missingId;
      }

      id = R.id.account_balance_label;
      TextView accountBalanceLabel = ViewBindings.findChildViewById(rootView, id);
      if (accountBalanceLabel == null) {
        break missingId;
      }

      id = R.id.account_balance_summary;
      TextView accountBalanceSummary = ViewBindings.findChildViewById(rootView, id);
      if (accountBalanceSummary == null) {
        break missingId;
      }

      id = R.id.account_delete_button;
      MaterialButton accountDeleteButton = ViewBindings.findChildViewById(rootView, id);
      if (accountDeleteButton == null) {
        break missingId;
      }

      id = R.id.account_help_button;
      MaterialButton accountHelpButton = ViewBindings.findChildViewById(rootView, id);
      if (accountHelpButton == null) {
        break missingId;
      }

      id = R.id.account_label_barrier;
      Barrier accountLabelBarrier = ViewBindings.findChildViewById(rootView, id);
      if (accountLabelBarrier == null) {
        break missingId;
      }

      id = R.id.account_legal;
      TextView accountLegal = ViewBindings.findChildViewById(rootView, id);
      if (accountLegal == null) {
        break missingId;
      }

      id = R.id.account_logout_button;
      MaterialButton accountLogoutButton = ViewBindings.findChildViewById(rootView, id);
      if (accountLogoutButton == null) {
        break missingId;
      }

      id = R.id.account_network_domain_name;
      TextView accountNetworkDomainName = ViewBindings.findChildViewById(rootView, id);
      if (accountNetworkDomainName == null) {
        break missingId;
      }

      id = R.id.account_network_name;
      TextView accountNetworkName = ViewBindings.findChildViewById(rootView, id);
      if (accountNetworkName == null) {
        break missingId;
      }

      id = R.id.account_subscription_bottom_barrier;
      Barrier accountSubscriptionBottomBarrier = ViewBindings.findChildViewById(rootView, id);
      if (accountSubscriptionBottomBarrier == null) {
        break missingId;
      }

      id = R.id.account_subscription_change_button;
      MaterialButton accountSubscriptionChangeButton = ViewBindings.findChildViewById(rootView, id);
      if (accountSubscriptionChangeButton == null) {
        break missingId;
      }

      id = R.id.account_subscription_change_spinner;
      CircularProgressIndicator accountSubscriptionChangeSpinner = ViewBindings.findChildViewById(rootView, id);
      if (accountSubscriptionChangeSpinner == null) {
        break missingId;
      }

      id = R.id.account_subscription_error;
      TextView accountSubscriptionError = ViewBindings.findChildViewById(rootView, id);
      if (accountSubscriptionError == null) {
        break missingId;
      }

      id = R.id.account_subscription_label;
      TextView accountSubscriptionLabel = ViewBindings.findChildViewById(rootView, id);
      if (accountSubscriptionLabel == null) {
        break missingId;
      }

      id = R.id.account_subscription_price;
      TextView accountSubscriptionPrice = ViewBindings.findChildViewById(rootView, id);
      if (accountSubscriptionPrice == null) {
        break missingId;
      }

      id = R.id.account_subscription_price_description;
      TextView accountSubscriptionPriceDescription = ViewBindings.findChildViewById(rootView, id);
      if (accountSubscriptionPriceDescription == null) {
        break missingId;
      }

      id = R.id.account_subscription_price_left_barrier;
      Barrier accountSubscriptionPriceLeftBarrier = ViewBindings.findChildViewById(rootView, id);
      if (accountSubscriptionPriceLeftBarrier == null) {
        break missingId;
      }

      id = R.id.account_subscription_summary;
      TextView accountSubscriptionSummary = ViewBindings.findChildViewById(rootView, id);
      if (accountSubscriptionSummary == null) {
        break missingId;
      }

      id = R.id.account_subscription_top_barrier;
      Barrier accountSubscriptionTopBarrier = ViewBindings.findChildViewById(rootView, id);
      if (accountSubscriptionTopBarrier == null) {
        break missingId;
      }

      id = R.id.account_update_button;
      MaterialButton accountUpdateButton = ViewBindings.findChildViewById(rootView, id);
      if (accountUpdateButton == null) {
        break missingId;
      }

      id = R.id.account_update_spinner;
      CircularProgressIndicator accountUpdateSpinner = ViewBindings.findChildViewById(rootView, id);
      if (accountUpdateSpinner == null) {
        break missingId;
      }

      id = R.id.account_wallet_balance_label;
      TextView accountWalletBalanceLabel = ViewBindings.findChildViewById(rootView, id);
      if (accountWalletBalanceLabel == null) {
        break missingId;
      }

      id = R.id.account_wallet_balance_summary;
      TextView accountWalletBalanceSummary = ViewBindings.findChildViewById(rootView, id);
      if (accountWalletBalanceSummary == null) {
        break missingId;
      }

      id = R.id.account_wallet_bottom_barrier;
      Barrier accountWalletBottomBarrier = ViewBindings.findChildViewById(rootView, id);
      if (accountWalletBottomBarrier == null) {
        break missingId;
      }

      id = R.id.account_wallet_description;
      TextView accountWalletDescription = ViewBindings.findChildViewById(rootView, id);
      if (accountWalletDescription == null) {
        break missingId;
      }

      id = R.id.account_wallet_error;
      TextView accountWalletError = ViewBindings.findChildViewById(rootView, id);
      if (accountWalletError == null) {
        break missingId;
      }

      id = R.id.account_wallet_init_button;
      MaterialButton accountWalletInitButton = ViewBindings.findChildViewById(rootView, id);
      if (accountWalletInitButton == null) {
        break missingId;
      }

      id = R.id.account_wallet_init_spinner;
      CircularProgressIndicator accountWalletInitSpinner = ViewBindings.findChildViewById(rootView, id);
      if (accountWalletInitSpinner == null) {
        break missingId;
      }

      id = R.id.account_wallet_label;
      TextView accountWalletLabel = ViewBindings.findChildViewById(rootView, id);
      if (accountWalletLabel == null) {
        break missingId;
      }

      id = R.id.account_wallet_pending_balance_label;
      TextView accountWalletPendingBalanceLabel = ViewBindings.findChildViewById(rootView, id);
      if (accountWalletPendingBalanceLabel == null) {
        break missingId;
      }

      id = R.id.account_wallet_pending_balance_summary;
      TextView accountWalletPendingBalanceSummary = ViewBindings.findChildViewById(rootView, id);
      if (accountWalletPendingBalanceSummary == null) {
        break missingId;
      }

      id = R.id.account_wallet_summary;
      TextView accountWalletSummary = ViewBindings.findChildViewById(rootView, id);
      if (accountWalletSummary == null) {
        break missingId;
      }

      id = R.id.account_wallet_top_barrier;
      Barrier accountWalletTopBarrier = ViewBindings.findChildViewById(rootView, id);
      if (accountWalletTopBarrier == null) {
        break missingId;
      }

      id = R.id.account_wallet_transfer_out_button;
      MaterialButton accountWalletTransferOutButton = ViewBindings.findChildViewById(rootView, id);
      if (accountWalletTransferOutButton == null) {
        break missingId;
      }

      id = R.id.account_wallet_transfer_out_spinner;
      CircularProgressIndicator accountWalletTransferOutSpinner = ViewBindings.findChildViewById(rootView, id);
      if (accountWalletTransferOutSpinner == null) {
        break missingId;
      }

      return new FragmentAccountBinding((ScrollView) rootView, accountBalanceBottomBarrier,
          accountBalanceLabel, accountBalanceSummary, accountDeleteButton, accountHelpButton,
          accountLabelBarrier, accountLegal, accountLogoutButton, accountNetworkDomainName,
          accountNetworkName, accountSubscriptionBottomBarrier, accountSubscriptionChangeButton,
          accountSubscriptionChangeSpinner, accountSubscriptionError, accountSubscriptionLabel,
          accountSubscriptionPrice, accountSubscriptionPriceDescription,
          accountSubscriptionPriceLeftBarrier, accountSubscriptionSummary,
          accountSubscriptionTopBarrier, accountUpdateButton, accountUpdateSpinner,
          accountWalletBalanceLabel, accountWalletBalanceSummary, accountWalletBottomBarrier,
          accountWalletDescription, accountWalletError, accountWalletInitButton,
          accountWalletInitSpinner, accountWalletLabel, accountWalletPendingBalanceLabel,
          accountWalletPendingBalanceSummary, accountWalletSummary, accountWalletTopBarrier,
          accountWalletTransferOutButton, accountWalletTransferOutSpinner);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

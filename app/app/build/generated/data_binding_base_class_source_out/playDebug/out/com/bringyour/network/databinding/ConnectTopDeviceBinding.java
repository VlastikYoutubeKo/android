// Generated by view binder compiler. Do not edit!
package com.bringyour.network.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Barrier;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bringyour.network.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ConnectTopDeviceBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Barrier connectBottomBarrier;

  @NonNull
  public final ImageButton connectBroaden;

  @NonNull
  public final ImageView connectDeviceImage;

  @NonNull
  public final MaterialButton connectDisconnect;

  @NonNull
  public final TextView connectHeader;

  @NonNull
  public final Barrier connectHeaderBarrier;

  @NonNull
  public final MaterialButton connectIssue;

  @NonNull
  public final TextView connectLocationDeviceLabel;

  @NonNull
  public final ImageButton connectShuffle;

  @NonNull
  public final Barrier connectSideBarrier;

  private ConnectTopDeviceBinding(@NonNull ConstraintLayout rootView,
      @NonNull Barrier connectBottomBarrier, @NonNull ImageButton connectBroaden,
      @NonNull ImageView connectDeviceImage, @NonNull MaterialButton connectDisconnect,
      @NonNull TextView connectHeader, @NonNull Barrier connectHeaderBarrier,
      @NonNull MaterialButton connectIssue, @NonNull TextView connectLocationDeviceLabel,
      @NonNull ImageButton connectShuffle, @NonNull Barrier connectSideBarrier) {
    this.rootView = rootView;
    this.connectBottomBarrier = connectBottomBarrier;
    this.connectBroaden = connectBroaden;
    this.connectDeviceImage = connectDeviceImage;
    this.connectDisconnect = connectDisconnect;
    this.connectHeader = connectHeader;
    this.connectHeaderBarrier = connectHeaderBarrier;
    this.connectIssue = connectIssue;
    this.connectLocationDeviceLabel = connectLocationDeviceLabel;
    this.connectShuffle = connectShuffle;
    this.connectSideBarrier = connectSideBarrier;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ConnectTopDeviceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ConnectTopDeviceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.connect_top_device, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ConnectTopDeviceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.connect_bottom_barrier;
      Barrier connectBottomBarrier = ViewBindings.findChildViewById(rootView, id);
      if (connectBottomBarrier == null) {
        break missingId;
      }

      id = R.id.connect_broaden;
      ImageButton connectBroaden = ViewBindings.findChildViewById(rootView, id);
      if (connectBroaden == null) {
        break missingId;
      }

      id = R.id.connect_device_image;
      ImageView connectDeviceImage = ViewBindings.findChildViewById(rootView, id);
      if (connectDeviceImage == null) {
        break missingId;
      }

      id = R.id.connect_disconnect;
      MaterialButton connectDisconnect = ViewBindings.findChildViewById(rootView, id);
      if (connectDisconnect == null) {
        break missingId;
      }

      id = R.id.connect_header;
      TextView connectHeader = ViewBindings.findChildViewById(rootView, id);
      if (connectHeader == null) {
        break missingId;
      }

      id = R.id.connect_header_barrier;
      Barrier connectHeaderBarrier = ViewBindings.findChildViewById(rootView, id);
      if (connectHeaderBarrier == null) {
        break missingId;
      }

      id = R.id.connect_issue;
      MaterialButton connectIssue = ViewBindings.findChildViewById(rootView, id);
      if (connectIssue == null) {
        break missingId;
      }

      id = R.id.connect_location_device_label;
      TextView connectLocationDeviceLabel = ViewBindings.findChildViewById(rootView, id);
      if (connectLocationDeviceLabel == null) {
        break missingId;
      }

      id = R.id.connect_shuffle;
      ImageButton connectShuffle = ViewBindings.findChildViewById(rootView, id);
      if (connectShuffle == null) {
        break missingId;
      }

      id = R.id.connect_side_barrier;
      Barrier connectSideBarrier = ViewBindings.findChildViewById(rootView, id);
      if (connectSideBarrier == null) {
        break missingId;
      }

      return new ConnectTopDeviceBinding((ConstraintLayout) rootView, connectBottomBarrier,
          connectBroaden, connectDeviceImage, connectDisconnect, connectHeader,
          connectHeaderBarrier, connectIssue, connectLocationDeviceLabel, connectShuffle,
          connectSideBarrier);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

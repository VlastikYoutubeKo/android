// Generated by view binder compiler. Do not edit!
package com.bringyour.network.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Barrier;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bringyour.network.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.checkbox.MaterialCheckBox;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentWalletTransferOutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView transferAmountLabel;

  @NonNull
  public final TextView walletBalance;

  @NonNull
  public final EditText walletTransferAmount;

  @NonNull
  public final Barrier walletTransferAmountBarrier;

  @NonNull
  public final MaterialButton walletTransferMaxAmountButton;

  @NonNull
  public final EditText walletTransferOutAddress;

  @NonNull
  public final TextView walletTransferOutAddressInvalid;

  @NonNull
  public final TextView walletTransferOutAddressLabel;

  @NonNull
  public final CircularProgressIndicator walletTransferOutAddressSpinner;

  @NonNull
  public final TextView walletTransferOutAddressValid;

  @NonNull
  public final MaterialButton walletTransferOutButton;

  @NonNull
  public final TextView walletTransferOutDescription;

  @NonNull
  public final TextView walletTransferOutError;

  @NonNull
  public final TextView walletTransferOutHeader;

  @NonNull
  public final MaterialButton walletTransferOutHelpButton;

  @NonNull
  public final CircularProgressIndicator walletTransferOutSpinner;

  @NonNull
  public final TextView walletTransferOutSuccess;

  @NonNull
  public final MaterialCheckBox walletTransferOutTerms;

  @NonNull
  public final MaterialButton walletTransferTestAmountButton;

  private FragmentWalletTransferOutBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView transferAmountLabel, @NonNull TextView walletBalance,
      @NonNull EditText walletTransferAmount, @NonNull Barrier walletTransferAmountBarrier,
      @NonNull MaterialButton walletTransferMaxAmountButton,
      @NonNull EditText walletTransferOutAddress, @NonNull TextView walletTransferOutAddressInvalid,
      @NonNull TextView walletTransferOutAddressLabel,
      @NonNull CircularProgressIndicator walletTransferOutAddressSpinner,
      @NonNull TextView walletTransferOutAddressValid,
      @NonNull MaterialButton walletTransferOutButton,
      @NonNull TextView walletTransferOutDescription, @NonNull TextView walletTransferOutError,
      @NonNull TextView walletTransferOutHeader,
      @NonNull MaterialButton walletTransferOutHelpButton,
      @NonNull CircularProgressIndicator walletTransferOutSpinner,
      @NonNull TextView walletTransferOutSuccess, @NonNull MaterialCheckBox walletTransferOutTerms,
      @NonNull MaterialButton walletTransferTestAmountButton) {
    this.rootView = rootView;
    this.transferAmountLabel = transferAmountLabel;
    this.walletBalance = walletBalance;
    this.walletTransferAmount = walletTransferAmount;
    this.walletTransferAmountBarrier = walletTransferAmountBarrier;
    this.walletTransferMaxAmountButton = walletTransferMaxAmountButton;
    this.walletTransferOutAddress = walletTransferOutAddress;
    this.walletTransferOutAddressInvalid = walletTransferOutAddressInvalid;
    this.walletTransferOutAddressLabel = walletTransferOutAddressLabel;
    this.walletTransferOutAddressSpinner = walletTransferOutAddressSpinner;
    this.walletTransferOutAddressValid = walletTransferOutAddressValid;
    this.walletTransferOutButton = walletTransferOutButton;
    this.walletTransferOutDescription = walletTransferOutDescription;
    this.walletTransferOutError = walletTransferOutError;
    this.walletTransferOutHeader = walletTransferOutHeader;
    this.walletTransferOutHelpButton = walletTransferOutHelpButton;
    this.walletTransferOutSpinner = walletTransferOutSpinner;
    this.walletTransferOutSuccess = walletTransferOutSuccess;
    this.walletTransferOutTerms = walletTransferOutTerms;
    this.walletTransferTestAmountButton = walletTransferTestAmountButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentWalletTransferOutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentWalletTransferOutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_wallet_transfer_out, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentWalletTransferOutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.transfer_amount_label;
      TextView transferAmountLabel = ViewBindings.findChildViewById(rootView, id);
      if (transferAmountLabel == null) {
        break missingId;
      }

      id = R.id.wallet_balance;
      TextView walletBalance = ViewBindings.findChildViewById(rootView, id);
      if (walletBalance == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_amount;
      EditText walletTransferAmount = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferAmount == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_amount_barrier;
      Barrier walletTransferAmountBarrier = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferAmountBarrier == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_max_amount_button;
      MaterialButton walletTransferMaxAmountButton = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferMaxAmountButton == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_out_address;
      EditText walletTransferOutAddress = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferOutAddress == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_out_address_invalid;
      TextView walletTransferOutAddressInvalid = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferOutAddressInvalid == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_out_address_label;
      TextView walletTransferOutAddressLabel = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferOutAddressLabel == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_out_address_spinner;
      CircularProgressIndicator walletTransferOutAddressSpinner = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferOutAddressSpinner == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_out_address_valid;
      TextView walletTransferOutAddressValid = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferOutAddressValid == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_out_button;
      MaterialButton walletTransferOutButton = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferOutButton == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_out_description;
      TextView walletTransferOutDescription = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferOutDescription == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_out_error;
      TextView walletTransferOutError = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferOutError == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_out_header;
      TextView walletTransferOutHeader = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferOutHeader == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_out_help_button;
      MaterialButton walletTransferOutHelpButton = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferOutHelpButton == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_out_spinner;
      CircularProgressIndicator walletTransferOutSpinner = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferOutSpinner == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_out_success;
      TextView walletTransferOutSuccess = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferOutSuccess == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_out_terms;
      MaterialCheckBox walletTransferOutTerms = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferOutTerms == null) {
        break missingId;
      }

      id = R.id.wallet_transfer_test_amount_button;
      MaterialButton walletTransferTestAmountButton = ViewBindings.findChildViewById(rootView, id);
      if (walletTransferTestAmountButton == null) {
        break missingId;
      }

      return new FragmentWalletTransferOutBinding((ConstraintLayout) rootView, transferAmountLabel,
          walletBalance, walletTransferAmount, walletTransferAmountBarrier,
          walletTransferMaxAmountButton, walletTransferOutAddress, walletTransferOutAddressInvalid,
          walletTransferOutAddressLabel, walletTransferOutAddressSpinner,
          walletTransferOutAddressValid, walletTransferOutButton, walletTransferOutDescription,
          walletTransferOutError, walletTransferOutHeader, walletTransferOutHelpButton,
          walletTransferOutSpinner, walletTransferOutSuccess, walletTransferOutTerms,
          walletTransferTestAmountButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

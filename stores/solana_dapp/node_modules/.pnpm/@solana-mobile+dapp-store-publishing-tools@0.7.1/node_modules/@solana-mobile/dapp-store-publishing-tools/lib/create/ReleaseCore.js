function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _async_iterator(iterable) {
    var method, async, sync, retry = 2;
    for("undefined" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;){
        if (async && null != (method = iterable[async])) return method.call(iterable);
        if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable));
        async = "@@asyncIterator", sync = "@@iterator";
    }
    throw new TypeError("Object is not async iterable");
}
function AsyncFromSyncIterator(s) {
    function AsyncFromSyncIteratorContinuation(r) {
        if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object."));
        var done = r.done;
        return Promise.resolve(r.value).then(function(value) {
            return {
                value: value,
                done: done
            };
        });
    }
    return(AsyncFromSyncIterator = function(s) {
        this.s = s, this.n = s.next;
    }, AsyncFromSyncIterator.prototype = {
        s: null,
        n: null,
        next: function() {
            return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));
        },
        return: function(value) {
            var ret = this.s.return;
            return void 0 === ret ? Promise.resolve({
                value: value,
                done: !0
            }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments));
        },
        throw: function(value) {
            var thr = this.s.return;
            return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments));
        }
    }, new AsyncFromSyncIterator(s));
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
import path from "path";
import fs from "fs";
import { createHash } from "crypto";
import mime from "mime";
import debugModule from "debug";
import { toMetaplexFile } from "@metaplex-foundation/js";
import { Constants, mintNft } from "../CoreUtils.js";
import * as util from "util";
import { metaplexFileReplacer, validateRelease } from "../validate/CoreValidation.js";
import { imageSize } from "image-size";
var runImgSize = util.promisify(imageSize);
var debug = debugModule("RELEASE");
var getFileMetadata = function() {
    var _ref = _async_to_generator(function(item) {
        var _item_uri, file, mediaBuffer, size, hash, _item_uri1, _item_uri2, metadata;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    file = path.join(process.cwd(), (_item_uri = item.uri) !== null && _item_uri !== void 0 ? _item_uri : "");
                    debug({
                        file: file
                    });
                    return [
                        4,
                        fs.promises.readFile(file)
                    ];
                case 1:
                    mediaBuffer = _state.sent();
                    return [
                        4,
                        fs.promises.stat(file)
                    ];
                case 2:
                    size = _state.sent().size;
                    hash = createHash("sha256").update(mediaBuffer).digest("hex");
                    metadata = {
                        purpose: item.purpose,
                        uri: toMetaplexFile(mediaBuffer, (_item_uri1 = item.uri) !== null && _item_uri1 !== void 0 ? _item_uri1 : ""),
                        mime: mime.getType((_item_uri2 = item.uri) !== null && _item_uri2 !== void 0 ? _item_uri2 : "") || "",
                        size: size,
                        sha256: hash
                    };
                    return [
                        2,
                        metadata
                    ];
            }
        });
    });
    return function getFileMetadata(item) {
        return _ref.apply(this, arguments);
    };
}();
var getMediaMetadata = function() {
    var _ref = _async_to_generator(function(item) {
        var _item_uri, size, metadata, _size_width, _size_height;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        runImgSize((_item_uri = item.uri) !== null && _item_uri !== void 0 ? _item_uri : "")
                    ];
                case 1:
                    size = _state.sent();
                    return [
                        4,
                        getFileMetadata(item)
                    ];
                case 2:
                    metadata = _state.sent();
                    return [
                        2,
                        _object_spread_props(_object_spread({}, metadata), {
                            width: (_size_width = size === null || size === void 0 ? void 0 : size.width) !== null && _size_width !== void 0 ? _size_width : 0,
                            height: (_size_height = size === null || size === void 0 ? void 0 : size.height) !== null && _size_height !== void 0 ? _size_height : 0
                        })
                    ];
            }
        });
    });
    return function getMediaMetadata(item) {
        return _ref.apply(this, arguments);
    };
}();
export var createReleaseJson = function() {
    var _ref = _async_to_generator(function(param, publisherAddress) {
        var releaseDetails, appDetails, publisherDetails, media, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, item, _, err, files, _iteratorAbruptCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, _value1, item1, _1, err1, releaseIcon, imgUri, tmpMedia, _2, releaseMetadata, _iteratorNormalCompletion, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step_value, locale, strings, _strings_saga_features;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    releaseDetails = param.releaseDetails, appDetails = param.appDetails, publisherDetails = param.publisherDetails;
                    media = [];
                    debug({
                        media: releaseDetails.media
                    });
                    _iteratorAbruptCompletion = false, _didIteratorError = false;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        7,
                        8,
                        13
                    ]);
                    _iterator = _async_iterator(releaseDetails.media || []);
                    _state.label = 2;
                case 2:
                    return [
                        4,
                        _iterator.next()
                    ];
                case 3:
                    if (!(_iteratorAbruptCompletion = !(_step = _state.sent()).done)) return [
                        3,
                        6
                    ];
                    _value = _step.value;
                    item = _value;
                    _ = media.push;
                    return [
                        4,
                        getMediaMetadata(item)
                    ];
                case 4:
                    _.apply(media, [
                        _state.sent()
                    ]);
                    _state.label = 5;
                case 5:
                    _iteratorAbruptCompletion = false;
                    return [
                        3,
                        2
                    ];
                case 6:
                    return [
                        3,
                        13
                    ];
                case 7:
                    err = _state.sent();
                    _didIteratorError = true;
                    _iteratorError = err;
                    return [
                        3,
                        13
                    ];
                case 8:
                    _state.trys.push([
                        8,
                        ,
                        11,
                        12
                    ]);
                    if (!(_iteratorAbruptCompletion && _iterator.return != null)) return [
                        3,
                        10
                    ];
                    return [
                        4,
                        _iterator.return()
                    ];
                case 9:
                    _state.sent();
                    _state.label = 10;
                case 10:
                    return [
                        3,
                        12
                    ];
                case 11:
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                    return [
                        7
                    ];
                case 12:
                    return [
                        7
                    ];
                case 13:
                    files = [];
                    debug({
                        files: releaseDetails.files
                    });
                    _iteratorAbruptCompletion1 = false, _didIteratorError1 = false;
                    _state.label = 14;
                case 14:
                    _state.trys.push([
                        14,
                        20,
                        21,
                        26
                    ]);
                    _iterator1 = _async_iterator(releaseDetails.files);
                    _state.label = 15;
                case 15:
                    return [
                        4,
                        _iterator1.next()
                    ];
                case 16:
                    if (!(_iteratorAbruptCompletion1 = !(_step1 = _state.sent()).done)) return [
                        3,
                        19
                    ];
                    _value1 = _step1.value;
                    item1 = _value1;
                    _1 = files.push;
                    return [
                        4,
                        getFileMetadata(item1)
                    ];
                case 17:
                    _1.apply(files, [
                        _state.sent()
                    ]);
                    _state.label = 18;
                case 18:
                    _iteratorAbruptCompletion1 = false;
                    return [
                        3,
                        15
                    ];
                case 19:
                    return [
                        3,
                        26
                    ];
                case 20:
                    err1 = _state.sent();
                    _didIteratorError1 = true;
                    _iteratorError1 = err1;
                    return [
                        3,
                        26
                    ];
                case 21:
                    _state.trys.push([
                        21,
                        ,
                        24,
                        25
                    ]);
                    if (!(_iteratorAbruptCompletion1 && _iterator1.return != null)) return [
                        3,
                        23
                    ];
                    return [
                        4,
                        _iterator1.return()
                    ];
                case 22:
                    _state.sent();
                    _state.label = 23;
                case 23:
                    return [
                        3,
                        25
                    ];
                case 24:
                    if (_didIteratorError1) {
                        throw _iteratorError1;
                    }
                    return [
                        7
                    ];
                case 25:
                    return [
                        7
                    ];
                case 26:
                    releaseIcon = media.find(function(asset) {
                        return asset.purpose === "icon";
                    });
                    if (!releaseIcon) return [
                        3,
                        27
                    ];
                    imgUri = releaseIcon === null || releaseIcon === void 0 ? void 0 : releaseIcon.uri;
                    return [
                        3,
                        29
                    ];
                case 27:
                    imgUri = appDetails.icon;
                    tmpMedia = {
                        width: 0,
                        height: 0,
                        mime: "",
                        purpose: "icon",
                        sha256: "",
                        uri: imgUri === null || imgUri === void 0 ? void 0 : imgUri.fileName
                    };
                    _2 = media.push;
                    return [
                        4,
                        getMediaMetadata(tmpMedia)
                    ];
                case 28:
                    _2.apply(media, [
                        _state.sent()
                    ]);
                    _state.label = 29;
                case 29:
                    releaseMetadata = {
                        schema_version: Constants.PUBLISHING_SCHEMA_VER,
                        name: appDetails.name,
                        description: "Release NFT for ".concat(appDetails.name, " version ").concat(releaseDetails.android_details.version),
                        image: imgUri,
                        external_url: appDetails.urls.website,
                        properties: {
                            category: "dApp",
                            creators: [
                                {
                                    address: publisherAddress.toBase58(),
                                    share: 100
                                }
                            ]
                        },
                        extensions: {
                            solana_dapp_store: {
                                // @ts-expect-error
                                publisher_details: {
                                    name: publisherDetails.name,
                                    website: publisherDetails.website,
                                    contact: publisherDetails.email
                                },
                                release_details: {
                                    updated_on: new Date().toISOString(),
                                    license_url: appDetails.urls.license_url,
                                    copyright_url: appDetails.urls.copyright_url,
                                    privacy_policy_url: appDetails.urls.privacy_policy_url,
                                    localized_resources: {
                                        long_description: "1",
                                        new_in_version: "2",
                                        saga_features: releaseDetails.catalog["en-US"].saga_features != undefined ? "3" : undefined,
                                        name: "4",
                                        short_description: "5"
                                    }
                                },
                                media: media,
                                files: files,
                                android_details: releaseDetails.android_details
                            },
                            i18n: {}
                        }
                    };
                    _iteratorNormalCompletion = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                    try {
                        for(_iterator2 = Object.entries(releaseDetails.catalog)[Symbol.iterator](); !(_iteratorNormalCompletion = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion = true){
                            _step_value = _sliced_to_array(_step2.value, 2), locale = _step_value[0], strings = _step_value[1];
                            ;
                            // @ts-expect-error
                            releaseMetadata.extensions.i18n[locale] = {
                                "1": strings.long_description.replace(/^\s+|\s+$/g, ""),
                                "2": strings.new_in_version.replace(/^\s+|\s+$/g, ""),
                                "3": (_strings_saga_features = strings.saga_features) === null || _strings_saga_features === void 0 ? void 0 : _strings_saga_features.replace(/^\s+|\s+$/g, ""),
                                "4": strings.name.replace(/^\s+|\s+$/g, ""),
                                "5": strings.short_description.replace(/^\s+|\s+$/g, "")
                            };
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator2.return != null) {
                                _iterator2.return();
                            }
                        } finally{
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }
                    return [
                        2,
                        releaseMetadata
                    ];
            }
        });
    });
    return function createReleaseJson(_, publisherAddress) {
        return _ref.apply(this, arguments);
    };
}();
export var createRelease = function() {
    var _ref = _async_to_generator(function(param, param1) {
        var appMintAddress, releaseMintAddress, releaseDetails, appDetails, publisherDetails, publisher, metaplex, releaseJson, suppressedJson, txBuilder;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    appMintAddress = param.appMintAddress, releaseMintAddress = param.releaseMintAddress, releaseDetails = param.releaseDetails, appDetails = param.appDetails, publisherDetails = param.publisherDetails, publisher = param1.publisher, metaplex = param1.metaplex;
                    debug("Minting release NFT for: ".concat(appMintAddress.toBase58()));
                    return [
                        4,
                        createReleaseJson({
                            releaseDetails: releaseDetails,
                            appDetails: appDetails,
                            publisherDetails: publisherDetails
                        }, publisher.publicKey)
                    ];
                case 1:
                    releaseJson = _state.sent();
                    suppressedJson = JSON.stringify(releaseJson, metaplexFileReplacer, 2);
                    validateRelease(JSON.parse(suppressedJson));
                    return [
                        4,
                        mintNft(metaplex, releaseJson, {
                            useNewMint: releaseMintAddress,
                            collection: appMintAddress,
                            collectionAuthority: publisher,
                            creators: [
                                {
                                    address: publisher.publicKey,
                                    share: 100
                                }
                            ],
                            isMutable: false
                        })
                    ];
                case 2:
                    txBuilder = _state.sent();
                    // TODO(jon): Enable a case where the signer is not the publisher
                    // TODO(jon): Allow this to be unverified and to verify later
                    txBuilder.append(metaplex.nfts().builders().verifyCreator({
                        mintAddress: releaseMintAddress.publicKey,
                        creator: publisher
                    }));
                    return [
                        2,
                        {
                            releaseJson: releaseJson,
                            txBuilder: txBuilder
                        }
                    ];
            }
        });
    });
    return function createRelease(_, _1) {
        return _ref.apply(this, arguments);
    };
}();

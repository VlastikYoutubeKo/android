function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
import Ajv from "ajv";
// eslint-disable-next-line require-extensions/require-extensions
import publisherSchema from "../schemas/publisherJsonMetadata.json" assert {
    type: "json"
};
// eslint-disable-next-line require-extensions/require-extensions
import appSchema from "../schemas/appJsonMetadata.json" assert {
    type: "json"
};
// eslint-disable-next-line require-extensions/require-extensions
import releaseSchema from "../schemas/releaseJsonMetadata.json" assert {
    type: "json"
};
import { isMetaplexFile } from "@metaplex-foundation/js";
export var metaplexFileReplacer = function(k, v) {
    if (isMetaplexFile(v)) {
        return "https://temp-asset-path";
    }
    return v;
};
export var validatePublisher = function(publisherJson) {
    var jsonToValidate = _object_spread({}, publisherJson);
    if (typeof jsonToValidate.image !== "string") {
        var _jsonToValidate_image;
        jsonToValidate.image = (_jsonToValidate_image = jsonToValidate.image) === null || _jsonToValidate_image === void 0 ? void 0 : _jsonToValidate_image.fileName;
    }
    var ajv = new Ajv({
        strictTuples: false
    });
    var validate = ajv.compile(publisherSchema);
    var valid = validate(jsonToValidate);
    if (!valid) {
        console.error(validate.errors);
        throw new Error("Publisher JSON not valid");
    }
    return valid;
};
export var validateApp = function(appJson) {
    var jsonToValidate = _object_spread({}, appJson);
    if (typeof jsonToValidate.image !== "string") {
        var _jsonToValidate_image;
        jsonToValidate.image = (_jsonToValidate_image = jsonToValidate.image) === null || _jsonToValidate_image === void 0 ? void 0 : _jsonToValidate_image.fileName;
    }
    var ajv = new Ajv({
        strictTuples: false
    });
    var validate = ajv.compile(appSchema);
    var valid = validate(jsonToValidate);
    if (!valid) {
        console.error(validate.errors);
        throw new Error("App JSON not valid");
    }
    return valid;
};
export var validateRelease = function(releaseJson) {
    var jsonToValidate = _object_spread({}, releaseJson);
    if (typeof jsonToValidate.image !== "string") {
        var _jsonToValidate_image;
        jsonToValidate.image = (_jsonToValidate_image = jsonToValidate.image) === null || _jsonToValidate_image === void 0 ? void 0 : _jsonToValidate_image.fileName;
    }
    var ajv = new Ajv({
        strictTuples: false
    });
    var validate = ajv.compile(releaseSchema);
    var valid = validate(jsonToValidate);
    if (!valid) {
        console.error(validate.errors);
        throw new Error("Release JSON not valid");
    }
    return valid;
};

import { beforeEach, expect } from "@jest/globals";
import { createAppCliCmd, createCliCmd, createPublisherCliCmd, createReleaseCliCmd, initCliCmd, mainCli } from "../CliSetup";
import { Constants } from "../CliUtils";
describe("Cli Setup & Execution", function() {
    var outputHelpReference = "(outputHelp)";
    var errorOutput = "";
    var otherOutput = "";
    beforeEach(function() {
        errorOutput = "";
        otherOutput = "";
        mainCli.exitOverride();
        mainCli.configureOutput({
            getOutHelpWidth: function getOutHelpWidth() {
                return 250;
            },
            getErrHelpWidth: function getErrHelpWidth() {
                return 250;
            },
            writeOut: function writeOut(str) {
                otherOutput = str;
            },
            writeErr: function writeErr(str) {
                errorOutput = str;
            }
        });
    });
    test("Cli version argument reports correct version", function() {
        expect(function() {
            mainCli.parse([
                "npx",
                "dapp-store",
                "-V"
            ]);
        }).toThrow(Constants.CLI_VERSION);
    });
    test("Calling cli with no parameters displays general help", function() {
        expect(function() {
            mainCli.parse([
                "npx",
                "dapp-store"
            ]);
        }).toThrow(outputHelpReference);
        expect(generalHelp).toEqual(errorOutput);
    });
    test("Calling init command with help parameter shows contextual help info", function() {
        initCliCmd.exitOverride();
        expect(function() {
            initCliCmd.parse([
                "dapp-store",
                "init",
                "-h"
            ]);
        }).toThrow(outputHelpReference);
        expect(otherOutput).toEqual(initHelp);
    });
    test("Calling create command with no options lists all options", function() {
        createCliCmd.exitOverride();
        expect(function() {
            createCliCmd.parse([
                "dapp-store",
                "create"
            ]);
        }).toThrow(outputHelpReference);
        expect(errorOutput).toEqual(createHelp);
    });
    test("Calling create publisher command with no arguments warns about required argument", function() {
        createPublisherCliCmd.exitOverride();
        expect(function() {
            createPublisherCliCmd.parse([
                "dapp-store",
                "create",
                "publisher"
            ]);
        }).toThrow(keyPairArgHelp);
    });
    test("Calling create publisher command with help flag shows contextual help", function() {
        createPublisherCliCmd.exitOverride();
        expect(function() {
            createPublisherCliCmd.parse([
                "dapp-store",
                "create",
                "publisher",
                "-h"
            ]);
        }).toThrow(outputHelpReference);
        expect(otherOutput).toEqual(createPublisherHelp);
    });
    test("Calling create app command with no arguments warns about required argument", function() {
        createAppCliCmd.exitOverride();
        expect(function() {
            createAppCliCmd.parse([
                "dapp-store",
                "create",
                "app"
            ]);
        }).toThrow(keyPairArgHelp);
    });
    test("Calling create app command with help flag shows contextual help", function() {
        createAppCliCmd.exitOverride();
        expect(function() {
            createAppCliCmd.parse([
                "dapp-store",
                "create",
                "app",
                "-h"
            ]);
        }).toThrow(outputHelpReference);
        expect(otherOutput).toEqual(createAppHelp);
    });
    test("Calling create release command with no arguments warns about required argument", function() {
        createReleaseCliCmd.exitOverride();
        expect(function() {
            createReleaseCliCmd.parse([
                "dapp-store",
                "create",
                "release"
            ]);
        }).toThrow(keyPairArgHelp);
    });
    test("Calling create release command with help flag shows contextual help", function() {
        createReleaseCliCmd.exitOverride();
        expect(function() {
            createReleaseCliCmd.parse([
                "dapp-store",
                "create",
                "release",
                "-h"
            ]);
        }).toThrow(outputHelpReference);
        expect(otherOutput).toEqual(createReleaseHelp);
    });
    //--------------------------------------------------
    var generalHelp = "Usage: dapp-store [options] [command]\n\nCLI to assist with publishing to the Saga Dapp Store\n\nOptions:\n  -V, --version       output the version number\n  -h, --help          display help for command\n\nCommands:\n  init                First-time initialization of tooling configuration\n  create              Create a `publisher`, `app`, or `release`\n  validate [options]  Validates details prior to publishing\n  publish             Submit a publishing request (`submit`, `update`, `remove`, or `support`) to the Solana Mobile dApp publisher portal\n  help [command]      display help for command\n";
    var initHelp = "Usage: dapp-store init [options]\n\nFirst-time initialization of tooling configuration\n\nOptions:\n  -h, --help  display help for command\n";
    var keyPairArgHelp = "error: required option '-k, --keypair <path-to-keypair-file>' not specified";
    var createHelp = "Usage: dapp-store create [options] [command]\n\nCreate a `publisher`, `app`, or `release`\n\nOptions:\n  -h, --help           display help for command\n\nCommands:\n  publisher [options]  Create a publisher\n  app [options]        Create a app\n  release [options]    Create a release\n  help [command]       display help for command\n";
    var createPublisherHelp = 'Usage: dapp-store create publisher [options]\n\nCreate a publisher\n\nOptions:\n  -k, --keypair <path-to-keypair-file>   Path to keypair file\n  -u, --url <url>                        RPC URL (default: "https://api.devnet.solana.com")\n  -d, --dry-run                          Flag for dry run. Doesn\'t mint an NFT\n  -s, --storage-config <storage-config>  Provide alternative storage configuration details\n  -h, --help                             display help for command\n';
    var createAppHelp = 'Usage: dapp-store create app [options]\n\nCreate a app\n\nOptions:\n  -k, --keypair <path-to-keypair-file>                   Path to keypair file\n  -p, --publisher-mint-address <publisher-mint-address>  The mint address of the publisher NFT\n  -u, --url <url>                                        RPC URL (default: "https://api.devnet.solana.com")\n  -d, --dry-run                                          Flag for dry run. Doesn\'t mint an NFT\n  -s, --storage-config <storage-config>                  Provide alternative storage configuration details\n  -h, --help                                             display help for command\n';
    var createReleaseHelp = 'Usage: dapp-store create release [options]\n\nCreate a release\n\nOptions:\n  -k, --keypair <path-to-keypair-file>       Path to keypair file\n  -a, --app-mint-address <app-mint-address>  The mint address of the app NFT\n  -u, --url <url>                            RPC URL (default: "https://api.devnet.solana.com")\n  -d, --dry-run                              Flag for dry run. Doesn\'t mint an NFT\n  -b, --build-tools-path <build-tools-path>  Path to Android build tools which contains AAPT2\n  -s, --storage-config <storage-config>      Provide alternative storage configuration details\n  -h, --help                                 display help for command\n';
});

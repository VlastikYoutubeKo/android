function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
export var S3StorageManager = /*#__PURE__*/ function() {
    "use strict";
    function S3StorageManager(envVars) {
        _class_call_check(this, S3StorageManager);
        _define_property(this, "envVars", void 0);
        _define_property(this, "_config", void 0);
        this.envVars = envVars;
        this._config = undefined;
        if (envVars.hasS3EnvArgs) {
            this._config = {
                accessKey: this.envVars.s3Config.accessKey,
                secretKey: this.envVars.s3Config.secretKey,
                bucketName: this.envVars.s3Config.bucketName,
                regionName: this.envVars.s3Config.regionName
            };
        }
    }
    _create_class(S3StorageManager, [
        {
            key: "hasS3Config",
            get: function get() {
                return this._config != undefined;
            }
        },
        {
            key: "s3Config",
            get: function get() {
                return this._config;
            }
        },
        {
            key: "parseCmdArg",
            value: function parseCmdArg(cmdArg) {
                if (!cmdArg || cmdArg == "") return;
                try {
                    //This will overwrite any existing parameters already obtained from the .env file
                    var parsedArray = JSON.parse("".concat(cmdArg));
                    if (_instanceof(parsedArray, Array) && parsedArray[0] == "s3") {
                        if (parsedArray.length != 5) throw new Error("Invalid parameters");
                        this._config = {
                            accessKey: parsedArray[1],
                            secretKey: parsedArray[2],
                            bucketName: parsedArray[3],
                            regionName: parsedArray[4]
                        };
                    }
                } catch (e) {
                    throw new Error("There was an error parsing your s3 parameters from the CLI. Please ensure they are formatted correctly.");
                }
            }
        }
    ]);
    return S3StorageManager;
}();

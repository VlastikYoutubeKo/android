function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
import { Command } from "commander";
import { validateCommand } from "./commands/index.js";
import { createAppCommand, createPublisherCommand, createReleaseCommand } from "./commands/create/index.js";
import { publishRemoveCommand, publishSubmitCommand, publishSupportCommand, publishUpdateCommand } from "./commands/publish/index.js";
import { checkForSelfUpdate, checkSubmissionNetwork, Constants, generateNetworkSuffix, parseKeypair, showMessage } from "./CliUtils.js";
import * as dotenv from "dotenv";
import { initScaffold } from "./commands/scaffolding/index.js";
import { loadPublishDetails, loadPublishDetailsWithChecks } from "./config/PublishDetails.js";
dotenv.config();
var hasAddressInConfig = function(param) {
    var address = param.address;
    return !!address;
};
export var mainCli = new Command();
function resolveBuildToolsPath(buildToolsPath) {
    // If a path was specified on the command line, use that
    if (buildToolsPath !== undefined) {
        return buildToolsPath;
    }
    // If a path is specified in a .env file, use that
    if (process.env.ANDROID_TOOLS_DIR !== undefined) {
        return process.env.ANDROID_TOOLS_DIR;
    }
    // No path was specified
    return;
}
/**
 * This method should be updated with each new release of the CLI, and just do nothing when there isn't anything to report
 */ function latestReleaseMessage() {
    showMessage("Publishing Tools Version ".concat(Constants.CLI_VERSION), "- short_description value reduced to 30 character limit", "warning");
}
function tryWithErrorMessage(block) {
    return _tryWithErrorMessage.apply(this, arguments);
}
function _tryWithErrorMessage() {
    _tryWithErrorMessage = _async_to_generator(function(block) {
        var e, _e_message, errorMsg;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        block()
                    ];
                case 1:
                    _state.sent();
                    return [
                        3,
                        3
                    ];
                case 2:
                    e = _state.sent();
                    errorMsg = (_e_message = e === null || e === void 0 ? void 0 : e.message) !== null && _e_message !== void 0 ? _e_message : "";
                    showMessage("Error", errorMsg, "error");
                    process.exit(-1);
                    return [
                        3,
                        3
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return _tryWithErrorMessage.apply(this, arguments);
}
mainCli.name("dapp-store").version(Constants.CLI_VERSION).description("CLI to assist with publishing to the Saga Dapp Store");
export var initCliCmd = mainCli.command("init").description("First-time initialization of tooling configuration").action(/*#__PURE__*/ _async_to_generator(function() {
    return _ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                return [
                    4,
                    tryWithErrorMessage(/*#__PURE__*/ _async_to_generator(function() {
                        var msg;
                        return _ts_generator(this, function(_state) {
                            msg = initScaffold();
                            showMessage("Initialized", msg);
                            return [
                                2
                            ];
                        });
                    }))
                ];
            case 1:
                _state.sent();
                return [
                    2
                ];
        }
    });
}));
export var createCliCmd = mainCli.command("create").description("Create a `publisher`, `app`, or `release`");
export var createPublisherCliCmd = createCliCmd.command("publisher").description("Create a publisher").requiredOption("-k, --keypair <path-to-keypair-file>", "Path to keypair file").option("-u, --url <url>", "RPC URL", Constants.DEFAULT_RPC_DEVNET).option("-d, --dry-run", "Flag for dry run. Doesn't mint an NFT").option("-s, --storage-config <storage-config>", "Provide alternative storage configuration details").action(function() {
    var _ref = _async_to_generator(function(param) {
        var keypair, url, dryRun, storageConfig;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    keypair = param.keypair, url = param.url, dryRun = param.dryRun, storageConfig = param.storageConfig;
                    return [
                        4,
                        tryWithErrorMessage(/*#__PURE__*/ _async_to_generator(function() {
                            var signer, result, displayUrl, resultText;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        latestReleaseMessage();
                                        return [
                                            4,
                                            checkForSelfUpdate()
                                        ];
                                    case 1:
                                        _state.sent();
                                        signer = parseKeypair(keypair);
                                        if (!signer) return [
                                            3,
                                            3
                                        ];
                                        return [
                                            4,
                                            createPublisherCommand({
                                                signer: signer,
                                                url: url,
                                                dryRun: dryRun,
                                                storageParams: storageConfig
                                            })
                                        ];
                                    case 2:
                                        result = _state.sent();
                                        displayUrl = "https://solscan.io/token/".concat(result.publisherAddress).concat(generateNetworkSuffix(url));
                                        resultText = "Publisher NFT successfully minted:\n".concat(displayUrl);
                                        showMessage("Success", resultText);
                                        _state.label = 3;
                                    case 3:
                                        return [
                                            2
                                        ];
                                }
                            });
                        }))
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(_) {
        return _ref.apply(this, arguments);
    };
}());
export var createAppCliCmd = createCliCmd.command("app").description("Create a app").requiredOption("-k, --keypair <path-to-keypair-file>", "Path to keypair file").option("-p, --publisher-mint-address <publisher-mint-address>", "The mint address of the publisher NFT").option("-u, --url <url>", "RPC URL", Constants.DEFAULT_RPC_DEVNET).option("-d, --dry-run", "Flag for dry run. Doesn't mint an NFT").option("-s, --storage-config <storage-config>", "Provide alternative storage configuration details").action(function() {
    var _ref = _async_to_generator(function(param) {
        var publisherMintAddress, keypair, url, dryRun, storageConfig;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    publisherMintAddress = param.publisherMintAddress, keypair = param.keypair, url = param.url, dryRun = param.dryRun, storageConfig = param.storageConfig;
                    return [
                        4,
                        tryWithErrorMessage(/*#__PURE__*/ _async_to_generator(function() {
                            var config, signer, result, displayUrl, resultText;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        latestReleaseMessage();
                                        return [
                                            4,
                                            checkForSelfUpdate()
                                        ];
                                    case 1:
                                        _state.sent();
                                        return [
                                            4,
                                            loadPublishDetailsWithChecks()
                                        ];
                                    case 2:
                                        config = _state.sent();
                                        if (!hasAddressInConfig(config.publisher) && !publisherMintAddress) {
                                            throw new Error("Either specify a publisher mint address in the config file or specify as a CLI argument to this command.");
                                        }
                                        signer = parseKeypair(keypair);
                                        if (!signer) return [
                                            3,
                                            4
                                        ];
                                        return [
                                            4,
                                            createAppCommand({
                                                publisherMintAddress: publisherMintAddress,
                                                signer: signer,
                                                url: url,
                                                dryRun: dryRun,
                                                storageParams: storageConfig
                                            })
                                        ];
                                    case 3:
                                        result = _state.sent();
                                        displayUrl = "https://solscan.io/token/".concat(result.appAddress).concat(generateNetworkSuffix(url));
                                        resultText = "App NFT successfully minted:\n".concat(displayUrl);
                                        showMessage("Success", resultText);
                                        _state.label = 4;
                                    case 4:
                                        return [
                                            2
                                        ];
                                }
                            });
                        }))
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(_) {
        return _ref.apply(this, arguments);
    };
}());
export var createReleaseCliCmd = createCliCmd.command("release").description("Create a release").requiredOption("-k, --keypair <path-to-keypair-file>", "Path to keypair file").option("-a, --app-mint-address <app-mint-address>", "The mint address of the app NFT").option("-u, --url <url>", "RPC URL", Constants.DEFAULT_RPC_DEVNET).option("-d, --dry-run", "Flag for dry run. Doesn't mint an NFT").option("-b, --build-tools-path <build-tools-path>", "Path to Android build tools which contains AAPT2").option("-s, --storage-config <storage-config>", "Provide alternative storage configuration details").action(function() {
    var _ref = _async_to_generator(function(param) {
        var appMintAddress, keypair, url, dryRun, buildToolsPath, storageConfig;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    appMintAddress = param.appMintAddress, keypair = param.keypair, url = param.url, dryRun = param.dryRun, buildToolsPath = param.buildToolsPath, storageConfig = param.storageConfig;
                    return [
                        4,
                        tryWithErrorMessage(/*#__PURE__*/ _async_to_generator(function() {
                            var resolvedBuildToolsPath, config, signer, result, displayUrl, resultText;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        latestReleaseMessage();
                                        return [
                                            4,
                                            checkForSelfUpdate()
                                        ];
                                    case 1:
                                        _state.sent();
                                        resolvedBuildToolsPath = resolveBuildToolsPath(buildToolsPath);
                                        if (resolvedBuildToolsPath === undefined) {
                                            throw new Error("Please specify an Android build tools directory in the .env file or via the command line argument.");
                                        }
                                        return [
                                            4,
                                            loadPublishDetailsWithChecks()
                                        ];
                                    case 2:
                                        config = _state.sent();
                                        if (!hasAddressInConfig(config.app) && !appMintAddress) {
                                            throw new Error("Either specify an app mint address in the config file or specify as a CLI argument to this command");
                                        }
                                        signer = parseKeypair(keypair);
                                        if (!signer) return [
                                            3,
                                            4
                                        ];
                                        return [
                                            4,
                                            createReleaseCommand({
                                                appMintAddress: appMintAddress,
                                                buildToolsPath: resolvedBuildToolsPath,
                                                signer: signer,
                                                url: url,
                                                dryRun: dryRun,
                                                storageParams: storageConfig
                                            })
                                        ];
                                    case 3:
                                        result = _state.sent();
                                        displayUrl = "https://solscan.io/token/".concat(result === null || result === void 0 ? void 0 : result.releaseAddress).concat(generateNetworkSuffix(url));
                                        resultText = "Release NFT successfully minted:\n".concat(displayUrl);
                                        showMessage("Success", resultText);
                                        _state.label = 4;
                                    case 4:
                                        return [
                                            2
                                        ];
                                }
                            });
                        }))
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(_) {
        return _ref.apply(this, arguments);
    };
}());
mainCli.command("validate").description("Validates details prior to publishing").requiredOption("-k, --keypair <path-to-keypair-file>", "Path to keypair file").option("-b, --build-tools-path <build-tools-path>", "Path to Android build tools which contains AAPT2").action(function() {
    var _ref = _async_to_generator(function(param) {
        var keypair, buildToolsPath;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    keypair = param.keypair, buildToolsPath = param.buildToolsPath;
                    return [
                        4,
                        tryWithErrorMessage(/*#__PURE__*/ _async_to_generator(function() {
                            var resolvedBuildToolsPath, signer;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        latestReleaseMessage();
                                        return [
                                            4,
                                            checkForSelfUpdate()
                                        ];
                                    case 1:
                                        _state.sent();
                                        resolvedBuildToolsPath = resolveBuildToolsPath(buildToolsPath);
                                        if (resolvedBuildToolsPath === undefined) {
                                            throw new Error("Please specify an Android build tools directory in the .env file or via the command line argument.");
                                        }
                                        signer = parseKeypair(keypair);
                                        if (!signer) return [
                                            3,
                                            3
                                        ];
                                        return [
                                            4,
                                            validateCommand({
                                                signer: signer,
                                                buildToolsPath: resolvedBuildToolsPath
                                            })
                                        ];
                                    case 2:
                                        _state.sent();
                                        _state.label = 3;
                                    case 3:
                                        return [
                                            2
                                        ];
                                }
                            });
                        }))
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(_) {
        return _ref.apply(this, arguments);
    };
}());
var publishCommand = mainCli.command("publish").description("Submit a publishing request (`submit`, `update`, `remove`, or `support`) to the Solana Mobile dApp publisher portal");
publishCommand.command("submit").description("Submit a new app to the Solana Mobile dApp publisher portal").requiredOption("-k, --keypair <path-to-keypair-file>", "Path to keypair file").requiredOption("--complies-with-solana-dapp-store-policies", "An attestation that the app complies with the Solana dApp Store policies").requiredOption("--requestor-is-authorized", "An attestation that the party making this Solana dApp publisher portal request is authorized to do so").option("-a, --app-mint-address <app-mint-address>", "The mint address of the app NFT. If not specified, the value from your config file will be used.").option("-r, --release-mint-address <release-mint-address>", "The mint address of the release NFT. If not specified, the value from your config file will be used.").option("-u, --url <url>", "RPC URL", Constants.DEFAULT_RPC_DEVNET).option("-d, --dry-run", "Flag for dry run. Doesn't submit the request to the publisher portal.").action(function() {
    var _ref = _async_to_generator(function(param) {
        var appMintAddress, releaseMintAddress, keypair, url, compliesWithSolanaDappStorePolicies, requestorIsAuthorized, dryRun;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    appMintAddress = param.appMintAddress, releaseMintAddress = param.releaseMintAddress, keypair = param.keypair, url = param.url, compliesWithSolanaDappStorePolicies = param.compliesWithSolanaDappStorePolicies, requestorIsAuthorized = param.requestorIsAuthorized, dryRun = param.dryRun;
                    return [
                        4,
                        tryWithErrorMessage(/*#__PURE__*/ _async_to_generator(function() {
                            var config, signer, resultText;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        return [
                                            4,
                                            checkForSelfUpdate()
                                        ];
                                    case 1:
                                        _state.sent();
                                        return [
                                            4,
                                            checkSubmissionNetwork(url)
                                        ];
                                    case 2:
                                        _state.sent();
                                        return [
                                            4,
                                            loadPublishDetails(Constants.getConfigFilePath())
                                        ];
                                    case 3:
                                        config = _state.sent();
                                        if (!hasAddressInConfig(config.release) && !releaseMintAddress) {
                                            throw new Error("Either specify a release mint address in the config file or specify as a CLI argument to this command.");
                                        }
                                        signer = parseKeypair(keypair);
                                        if (!signer) return [
                                            3,
                                            5
                                        ];
                                        return [
                                            4,
                                            publishSubmitCommand({
                                                appMintAddress: appMintAddress,
                                                releaseMintAddress: releaseMintAddress,
                                                signer: signer,
                                                url: url,
                                                dryRun: dryRun,
                                                compliesWithSolanaDappStorePolicies: compliesWithSolanaDappStorePolicies,
                                                requestorIsAuthorized: requestorIsAuthorized
                                            })
                                        ];
                                    case 4:
                                        _state.sent();
                                        resultText = "Successfully submitted to the Solana Mobile dApp publisher portal";
                                        showMessage("Success", resultText);
                                        _state.label = 5;
                                    case 5:
                                        return [
                                            2
                                        ];
                                }
                            });
                        }))
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(_) {
        return _ref.apply(this, arguments);
    };
}());
publishCommand.command("update").description("Update an existing app on the Solana Mobile dApp publisher portal").requiredOption("-k, --keypair <path-to-keypair-file>", "Path to keypair file").requiredOption("--complies-with-solana-dapp-store-policies", "An attestation that the app complies with the Solana dApp Store policies").requiredOption("--requestor-is-authorized", "An attestation that the party making this Solana dApp publisher portal request is authorized to do so").option("-a, --app-mint-address <app-mint-address>", "The mint address of the app NFT. If not specified, the value from your config file will be used.").option("-r, --release-mint-address <release-mint-address>", "The mint address of the release NFT. If not specified, the value from your config file will be used.").option("-c, --critical", "Flag for a critical app update request").option("-u, --url <url>", "RPC URL", Constants.DEFAULT_RPC_DEVNET).option("-d, --dry-run", "Flag for dry run. Doesn't submit the request to the publisher portal.").action(function() {
    var _ref = _async_to_generator(function(param) {
        var appMintAddress, releaseMintAddress, keypair, url, compliesWithSolanaDappStorePolicies, requestorIsAuthorized, critical, dryRun;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    appMintAddress = param.appMintAddress, releaseMintAddress = param.releaseMintAddress, keypair = param.keypair, url = param.url, compliesWithSolanaDappStorePolicies = param.compliesWithSolanaDappStorePolicies, requestorIsAuthorized = param.requestorIsAuthorized, critical = param.critical, dryRun = param.dryRun;
                    return [
                        4,
                        tryWithErrorMessage(/*#__PURE__*/ _async_to_generator(function() {
                            var config, signer, resultText;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        return [
                                            4,
                                            checkForSelfUpdate()
                                        ];
                                    case 1:
                                        _state.sent();
                                        return [
                                            4,
                                            checkSubmissionNetwork(url)
                                        ];
                                    case 2:
                                        _state.sent();
                                        return [
                                            4,
                                            loadPublishDetails(Constants.getConfigFilePath())
                                        ];
                                    case 3:
                                        config = _state.sent();
                                        if (!hasAddressInConfig(config.release) && !releaseMintAddress) {
                                            throw new Error("Either specify a release mint address in the config file or specify as a CLI argument to this command.");
                                        }
                                        signer = parseKeypair(keypair);
                                        if (!signer) return [
                                            3,
                                            5
                                        ];
                                        return [
                                            4,
                                            publishUpdateCommand({
                                                appMintAddress: appMintAddress,
                                                releaseMintAddress: releaseMintAddress,
                                                signer: signer,
                                                url: url,
                                                dryRun: dryRun,
                                                compliesWithSolanaDappStorePolicies: compliesWithSolanaDappStorePolicies,
                                                requestorIsAuthorized: requestorIsAuthorized,
                                                critical: critical
                                            })
                                        ];
                                    case 4:
                                        _state.sent();
                                        resultText = "dApp successfully updated on the publisher portal";
                                        showMessage("Success", resultText);
                                        _state.label = 5;
                                    case 5:
                                        return [
                                            2
                                        ];
                                }
                            });
                        }))
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(_) {
        return _ref.apply(this, arguments);
    };
}());
publishCommand.command("remove").description("Remove an existing app from the Solana Mobile dApp publisher portal").requiredOption("-k, --keypair <path-to-keypair-file>", "Path to keypair file").requiredOption("--requestor-is-authorized", "An attestation that the party making this Solana dApp publisher portal request is authorized to do so").option("-a, --app-mint-address <app-mint-address>", "The mint address of the app NFT. If not specified, the value from your config file will be used.").option("-r, --release-mint-address <release-mint-address>", "The mint address of the release NFT. If not specified, the value from your config file will be used.").option("-c, --critical", "Flag for a critical app removal request").option("-u, --url <url>", "RPC URL", Constants.DEFAULT_RPC_DEVNET).option("-d, --dry-run", "Flag for dry run. Doesn't submit the request to the publisher portal.").action(function() {
    var _ref = _async_to_generator(function(param) {
        var appMintAddress, releaseMintAddress, keypair, url, requestorIsAuthorized, critical, dryRun;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    appMintAddress = param.appMintAddress, releaseMintAddress = param.releaseMintAddress, keypair = param.keypair, url = param.url, requestorIsAuthorized = param.requestorIsAuthorized, critical = param.critical, dryRun = param.dryRun;
                    return [
                        4,
                        tryWithErrorMessage(/*#__PURE__*/ _async_to_generator(function() {
                            var config, signer, resultText;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        return [
                                            4,
                                            checkForSelfUpdate()
                                        ];
                                    case 1:
                                        _state.sent();
                                        return [
                                            4,
                                            checkSubmissionNetwork(url)
                                        ];
                                    case 2:
                                        _state.sent();
                                        return [
                                            4,
                                            loadPublishDetails(Constants.getConfigFilePath())
                                        ];
                                    case 3:
                                        config = _state.sent();
                                        if (!hasAddressInConfig(config.release) && !releaseMintAddress) {
                                            throw new Error("Either specify a release mint address in the config file or specify as a CLI argument to this command.");
                                        }
                                        signer = parseKeypair(keypair);
                                        if (!signer) return [
                                            3,
                                            5
                                        ];
                                        return [
                                            4,
                                            publishRemoveCommand({
                                                appMintAddress: appMintAddress,
                                                releaseMintAddress: releaseMintAddress,
                                                signer: signer,
                                                url: url,
                                                dryRun: dryRun,
                                                requestorIsAuthorized: requestorIsAuthorized,
                                                critical: critical
                                            })
                                        ];
                                    case 4:
                                        _state.sent();
                                        resultText = "dApp successfully removed from the publisher portal";
                                        showMessage("Success", resultText);
                                        _state.label = 5;
                                    case 5:
                                        return [
                                            2
                                        ];
                                }
                            });
                        }))
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(_) {
        return _ref.apply(this, arguments);
    };
}());
publishCommand.command("support <request_details>").description("Submit a support request for an existing app on the Solana Mobile dApp publisher portal").requiredOption("-k, --keypair <path-to-keypair-file>", "Path to keypair file").requiredOption("--requestor-is-authorized", "An attestation that the party making this Solana dApp publisher portal request is authorized to do so").option("-a, --app-mint-address <app-mint-address>", "The mint address of the app NFT. If not specified, the value from your config file will be used.").option("-r, --release-mint-address <release-mint-address>", "The mint address of the release NFT. If not specified, the value from your config file will be used.").option("-u, --url <url>", "RPC URL", Constants.DEFAULT_RPC_DEVNET).option("-d, --dry-run", "Flag for dry run. Doesn't submit the request to the publisher portal.").action(function() {
    var _ref = _async_to_generator(function(requestDetails, param) {
        var appMintAddress, releaseMintAddress, keypair, url, requestorIsAuthorized, dryRun;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    appMintAddress = param.appMintAddress, releaseMintAddress = param.releaseMintAddress, keypair = param.keypair, url = param.url, requestorIsAuthorized = param.requestorIsAuthorized, dryRun = param.dryRun;
                    return [
                        4,
                        tryWithErrorMessage(/*#__PURE__*/ _async_to_generator(function() {
                            var config, signer, resultText;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        return [
                                            4,
                                            checkForSelfUpdate()
                                        ];
                                    case 1:
                                        _state.sent();
                                        return [
                                            4,
                                            checkSubmissionNetwork(url)
                                        ];
                                    case 2:
                                        _state.sent();
                                        return [
                                            4,
                                            loadPublishDetails(Constants.getConfigFilePath())
                                        ];
                                    case 3:
                                        config = _state.sent();
                                        if (!hasAddressInConfig(config.release) && !releaseMintAddress) {
                                            throw new Error("Either specify a release mint address in the config file or specify as a CLI argument to this command.");
                                        }
                                        signer = parseKeypair(keypair);
                                        if (!signer) return [
                                            3,
                                            5
                                        ];
                                        return [
                                            4,
                                            publishSupportCommand({
                                                appMintAddress: appMintAddress,
                                                releaseMintAddress: releaseMintAddress,
                                                signer: signer,
                                                url: url,
                                                dryRun: dryRun,
                                                requestorIsAuthorized: requestorIsAuthorized,
                                                requestDetails: requestDetails
                                            })
                                        ];
                                    case 4:
                                        _state.sent();
                                        resultText = "Support request sent successfully";
                                        showMessage("Success", resultText);
                                        _state.label = 5;
                                    case 5:
                                        return [
                                            2
                                        ];
                                }
                            });
                        }))
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(requestDetails, _) {
        return _ref.apply(this, arguments);
    };
}());

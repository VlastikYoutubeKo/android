function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
import * as dotenv from "dotenv";
export var EnvVariables = /*#__PURE__*/ function() {
    "use strict";
    function EnvVariables() {
        _class_call_check(this, EnvVariables);
        dotenv.config();
    }
    _create_class(EnvVariables, [
        {
            key: "hasAndroidTools",
            get: function get() {
                return process.env.ANDROID_TOOLS_DIR !== undefined;
            }
        },
        {
            key: "androidToolsDir",
            get: function get() {
                return process.env.ANDROID_TOOLS_DIR;
            }
        },
        {
            key: "hasS3EnvArgs",
            get: function get() {
                return process.env.STORAGE_TYPE == "s3" && process.env.S3_ACCESS_KEY != undefined && process.env.S3_SECRET_KEY != undefined && process.env.S3_BUCKET != undefined && process.env.S3_REGION != undefined;
            }
        },
        {
            key: "s3Config",
            get: function get() {
                return {
                    accessKey: process.env.S3_ACCESS_KEY,
                    secretKey: process.env.S3_SECRET_KEY,
                    bucketName: process.env.S3_BUCKET,
                    regionName: process.env.S3_REGION
                };
            }
        }
    ]);
    return EnvVariables;
}();

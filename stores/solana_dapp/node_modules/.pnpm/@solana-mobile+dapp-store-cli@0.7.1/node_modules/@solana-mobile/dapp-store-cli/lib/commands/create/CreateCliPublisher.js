function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
import { createPublisher } from "@solana-mobile/dapp-store-publishing-tools";
import { Connection, Keypair, sendAndConfirmTransaction } from "@solana/web3.js";
import { getMetaplexInstance } from "../../CliUtils.js";
import { loadPublishDetailsWithChecks, writeToPublishDetails } from "../../config/PublishDetails.js";
var createPublisherNft = function() {
    var _ref = _async_to_generator(function(param, param1) {
        var connection, publisher, publisherDetails, storageParams, dryRun, mintAddress, metaplex, txBuilder, blockhash, tx, txSig;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    connection = param.connection, publisher = param.publisher, publisherDetails = param.publisherDetails, storageParams = param.storageParams, dryRun = param1.dryRun;
                    mintAddress = Keypair.generate();
                    metaplex = getMetaplexInstance(connection, publisher, storageParams);
                    console.info("Creating publisher at address: ".concat(mintAddress.publicKey.toBase58()));
                    return [
                        4,
                        createPublisher({
                            mintAddress: mintAddress,
                            publisherDetails: publisherDetails
                        }, {
                            metaplex: metaplex,
                            publisher: publisher
                        })
                    ];
                case 1:
                    txBuilder = _state.sent();
                    return [
                        4,
                        connection.getLatestBlockhashAndContext()
                    ];
                case 2:
                    blockhash = _state.sent();
                    tx = txBuilder.toTransaction(blockhash.value);
                    tx.sign(mintAddress, publisher);
                    if (!!dryRun) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        sendAndConfirmTransaction(connection, tx, [
                            publisher,
                            mintAddress
                        ], {
                            minContextSlot: blockhash.context.slot
                        })
                    ];
                case 3:
                    txSig = _state.sent();
                    console.info({
                        txSig: txSig,
                        mintAddress: mintAddress.publicKey.toBase58()
                    });
                    _state.label = 4;
                case 4:
                    return [
                        2,
                        {
                            publisherAddress: mintAddress.publicKey.toBase58()
                        }
                    ];
            }
        });
    });
    return function createPublisherNft(_, _1) {
        return _ref.apply(this, arguments);
    };
}();
export var createPublisherCommand = function() {
    var _ref = _async_to_generator(function(param) {
        var signer, url, dryRun, storageParams, connection, _ref, publisherDetails, publisherAddress;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    signer = param.signer, url = param.url, dryRun = param.dryRun, storageParams = param.storageParams;
                    connection = new Connection(url);
                    return [
                        4,
                        loadPublishDetailsWithChecks()
                    ];
                case 1:
                    _ref = _state.sent(), publisherDetails = _ref.publisher;
                    return [
                        4,
                        createPublisherNft({
                            connection: connection,
                            publisher: signer,
                            publisherDetails: publisherDetails,
                            storageParams: storageParams
                        }, {
                            dryRun: dryRun
                        })
                    ];
                case 2:
                    publisherAddress = _state.sent().publisherAddress;
                    // TODO(sdlaver): dry-run should not modify config
                    return [
                        4,
                        writeToPublishDetails({
                            publisher: {
                                address: publisherAddress
                            }
                        })
                    ];
                case 3:
                    _state.sent();
                    return [
                        2,
                        {
                            publisherAddress: publisherAddress
                        }
                    ];
            }
        });
    });
    return function createPublisherCommand(_) {
        return _ref.apply(this, arguments);
    };
}();
